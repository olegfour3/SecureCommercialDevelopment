import aiogram.utils.markdown as md
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
import asyncio
import aioschedule
from config import BOT_TOKEN, BOT_PASSWORD
import telegram_service as tel_s


bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

if __name__ == "__main__":
    try:
        print('\n[INFO] Telegram bot launched\n')
        executor.start_polling(dp)
    except Exception as _ex:
        print('\n[ERR] Telegram bot startup error:\n', _ex)


# keyboards
bntMainMenu = KeyboardButton('‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
# MAIN MENU
bntClients = KeyboardButton('üõÑ –ö–ª–∏–µ–Ω—Ç—ã')
bntUsers = KeyboardButton('üòê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏')
btnSubscriptions = KeyboardButton('üí≤ –ü–æ–¥–ø–∏—Å–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤')
MainMenu = ReplyKeyboardMarkup(resize_keyboard=True).add(bntClients)
MainMenu.row(bntUsers)
MainMenu.row(btnSubscriptions)
# USERS MENU
bntGetUsers = KeyboardButton('üôå –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', callback_data='AllUsers')
bntAddUser = KeyboardButton('üòä –î–æ–±–∞–≤–∏—Ç—å')
bntDeleteUser = KeyboardButton('üòí –£–¥–∞–ª–∏—Ç—å')
UsersMenu = ReplyKeyboardMarkup(resize_keyboard=True).add(bntGetUsers)
UsersMenu.row(bntAddUser, bntDeleteUser)
UsersMenu.row(bntMainMenu)
# CLIENTS MENU
bntGetClients = KeyboardButton('üë• –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã')
bntAddClient = KeyboardButton('ü§ù –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞')
bntDeleteClient = KeyboardButton('üóø –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞')
ClientsMenu = ReplyKeyboardMarkup(resize_keyboard=True).add(bntGetClients)
ClientsMenu.row(bntAddClient, bntDeleteClient)
ClientsMenu.row(bntMainMenu)
# SUBSCRIPTIONS MENU
bntGetClients = KeyboardButton('üë• –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã')
bntActiveSubs = KeyboardButton('–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏')
bntNoActiveSubs = KeyboardButton('–ò—Å—Ç–æ—Ä–∏—è –ø–æ–¥–ø–∏—Å–æ–∫')
bntAddSub = KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É')
bntDeleteSub = KeyboardButton('–£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É')
bntAddUnlimitedSub = KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –±–µ–∑–ª–∏–º–∏—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É')
SubsMenu = ReplyKeyboardMarkup(resize_keyboard=True).add(bntGetClients)
SubsMenu.row(bntActiveSubs, bntNoActiveSubs)
SubsMenu.row(bntAddSub, bntDeleteSub)
SubsMenu.row(bntAddUnlimitedSub, bntMainMenu)
#  CANCEL MENU
bntCancel = KeyboardButton('–û—Ç–º–µ–Ω–∞')
CancelMenu = ReplyKeyboardMarkup(resize_keyboard=True).add(bntCancel)


# States


class Form(StatesGroup):
    sign_in = State()  # Will be represented in storage as 'Form:sign_in'


class User(StatesGroup):
    user_delete = State()
    user_create_id = State()
    user_create_name = State()


class Client(StatesGroup):
    client_delete = State()
    client_create_name = State()


# START


@dp.message_handler(commands='start')
async def cmd_start(message: types.Message):
    if tel_s.user_already_exist(message.from_user.id):
        await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å —Å:", reply_markup=MainMenu)
    else:
        await Form.sign_in.set()
        await message.reply("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ -_-")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞!")


# You can use state '*' if you need to handle all states
@dp.message_handler(state='*', commands='cancel')
@dp.message_handler(Text(equals='–û—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    """
    Allow user to cancel any action
    """
    current_state = await state.get_state()
    if current_state is None:
        if tel_s.user_already_exist(message.from_user.id):
            await message.reply('–û—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=MainMenu)
            return
        else:
            await message.reply('–û—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=types.ReplyKeyboardRemove())
            return
    # Cancel state and inform user about it
    await state.finish()
    # And remove keyboard (just in case)
    if current_state == Form.sign_in:
        await message.reply('–û—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=types.ReplyKeyboardRemove())
    else:
        await message.reply('–û—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=MainMenu)


@dp.message_handler(lambda message: message.text != BOT_PASSWORD, state=Form.sign_in)
async def process_gender_invalid(message: types.Message):
    # Wrong password
    return await message.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è")


@dp.message_handler(state=Form.sign_in)
async def sign_in(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['password'] = message.text

    await Form.next()
    await message.reply("–ü–∞—Ä–æ–ª—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π", reply_markup=MainMenu)

    # Finish authorization
    await state.finish()


# MAIN MENU


@dp.message_handler(commands='main')
@dp.message_handler(Text(equals='‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
async def main(message: types.Message):
    await message.answer('‚óÄÔ∏è', reply_markup=MainMenu)


@dp.message_handler(commands='clients')
@dp.message_handler(Text(equals='üõÑ –ö–ª–∏–µ–Ω—Ç—ã'))
async def clients(message: types.Message):
    await message.answer('üõÑ', reply_markup=ClientsMenu)


@dp.message_handler(commands='users')
@dp.message_handler(Text(equals='üòê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'))
async def users(message: types.Message):
    await message.answer('üòê', reply_markup=UsersMenu)


@dp.message_handler(Text(equals='üí≤ –ü–æ–¥–ø–∏—Å–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤'))
async def subscriptions(message: types.Message):
    await message.answer('üí≤', reply_markup=SubsMenu)


# CLIENTS


@dp.message_handler(commands='all_clients')
@dp.message_handler(Text(equals='üë• –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã'))
async def all_clients(message: types.Message):
    all_clients = tel_s.get_all_clients()
    if len(all_clients) == 0:
        await message.answer('–ü–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.')
        return

    markup = InlineKeyboardMarkup(row_width=2)
    btns = []
    for id, name, _ in all_clients:
        btns.append(InlineKeyboardButton(text=name, callback_data=f"client_{id}"))
    markup.add(*btns)
    await message.answer('–í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã:', reply_markup=markup)


@dp.callback_query_handler(lambda c: c.data.startswith('client_'))
async def callback_client(call: types.callback_query):
    client_id = call.data.split('_')[1]
    client_info = tel_s.get_client_info(client_id)
    if len(client_info) == 0:
        await call.message.answer(f'–ö–ª–∏–µ–Ω—Ç–∞ —Å id {client_id} —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!', reply_markup=ClientsMenu)
    else:
        await call.message.answer(f'ID: {client_info[0]}\n–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {client_info[1]}\n–ê–∫—Ç–∏–≤–µ–Ω: {client_info[2]}', reply_markup=ClientsMenu)
    await call.answer()


@dp.message_handler(Text(equals='üóø –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞'))
async def del_user(message: types.Message):
    await Client.client_delete.set()
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ id –∫–ª–∏–µ–Ω—Ç–∞:', reply_markup=CancelMenu)


@dp.message_handler(state=Client.client_delete)
async def del_user_finish(message: types.Message, state: FSMContext):
    res = tel_s.delete_client(message.text)
    await message.reply(res, reply_markup=MainMenu)
    await state.finish()


@dp.message_handler(Text(equals='ü§ù –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞'))
async def del_user(message: types.Message):
    await Client.client_create_name.set()
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', reply_markup=CancelMenu)


@dp.message_handler(lambda message: message.text, state=Client.client_create_name)
async def process_user_id(message: types.Message, state: FSMContext):
    res = tel_s.create_new_client(message.text)
    await message.reply(res[1], reply_markup=MainMenu)
    await state.finish()


# USERS MENU


@dp.message_handler(commands='all_users')
@dp.message_handler(Text(equals='üôå –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'))
async def all_users(message: types.Message):
    all_users = tel_s.get_all_users()
    if len(all_users) == 0:
        await message.answer('–ü–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.')
        return

    markup = InlineKeyboardMarkup(row_width=2)
    btns = []
    for user_id, user_name in all_users:
        btns.append(InlineKeyboardButton(text=user_name, callback_data=f"user_{user_id}"))
    markup.add(*btns)
    await message.answer('–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:', reply_markup=markup)


@dp.callback_query_handler(lambda c: c.data.startswith('user_'))
async def callback_user(call: types.callback_query):
    user_id = call.data.split('_')[1]
    if tel_s.user_already_exist(user_id):
        await call.message.answer(f'ID: {user_id}', reply_markup=UsersMenu)
    else:
        await call.message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {user_id} —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!', reply_markup=UsersMenu)
    await call.answer()


@dp.message_handler(Text(equals='üòí –£–¥–∞–ª–∏—Ç—å'))
async def del_user(message: types.Message):
    await User.user_delete.set()
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', reply_markup=CancelMenu)


@dp.message_handler(state=User.user_delete)
async def del_user_finish(message: types.Message, state: FSMContext):
    res = tel_s.delete_user(message.text)
    await message.reply(res, reply_markup=MainMenu)
    await state.finish()


@dp.message_handler(Text(equals='üòä –î–æ–±–∞–≤–∏—Ç—å'))
async def del_user(message: types.Message):
    await User.user_create_id.set()
    await message.answer('1) –û—Ç–ø—Ä–∞–≤—å—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', reply_markup=CancelMenu)


@dp.message_handler(lambda message: not message.text.isdigit(), state=User.user_create_id)
async def process_age_invalid(message: types.Message):
    # If user id is invalid
    return await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π id")


@dp.message_handler(lambda message: message.text.isdigit(), state=User.user_create_id)
async def process_user_id(message: types.Message, state: FSMContext):
    if len(message.text) != 9:
        return await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π id")

    await User.user_create_name.set()
    async with state.proxy() as data:
        data['user_id'] = message.text

    await message.reply("2) –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")


@dp.message_handler(lambda message: message.text, state=User.user_create_name)
async def process_user_mame(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['user_name'] = message.text

    res = tel_s.create_new_user(user_id=data['user_id'],user_name=data['user_name'])
    await message.reply(res[1], reply_markup=MainMenu)
    await state.finish()


# START BOT


def start_bot():
    if BOT_TOKEN is not None:
        try:
            print('\n[INFO] Telegram bot launched\n')
            executor.start_polling(dp)  # on_startup=on_startup
        except Exception as _ex:
            print('\n[ERR] Telegram bot startup error:\n', _ex)


async def add_msg_to_list(uid: int, msg_id: int):
    if uid not in users_messages:
        users_messages[uid] = [msg_id, ]
    else:
        users_messages[uid].append(msg_id)


async def on_startup(_):
    asyncio.create_task(scheduler())


async def do_something():
    pass


async def scheduler():
    aioschedule.every().day.at("2:50").do(do_something)
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(0)

